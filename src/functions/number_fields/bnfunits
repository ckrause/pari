Function: bnfunits
Section: number_fields
C-Name: bnfunits
Prototype: GDG
Help: bnfunits(bnf,{S}): output the fundamental units of the number field
 bnf output by bnfinit; if S is present and is a list of prime ideals compute
 fundamental S-units instead. The first component of the result contains the
 S-units, followed by fundamental units, followed by the torsion unit.
 The result may be used as an optional argument to bnfisunit.
Doc: output the fundamental units of the number field
 bnf output by bnfinit; if $S$ is present and is a list of prime ideals compute
 fundamental $S$-units instead. The first component of the result contains
 independent integral $S$-units generators: first non-units, then
 $r_1+r_2-1$ fundamental units, then the torsion unit. The result may be used
 as an optional argument to bnfisunit. The units are given in compact form:
 no expensive computation is attempted if the \var{bnf} does not already
 contain units.

 \bprog
  ? bnf = bnfinit(x^4 - x^3 + 4*x^2 + 3*x + 9, 1);
  ? S = idealprimedec(bnf,5); #S
  %2 = 2
  ? u = bnfunits(bnf)[1]
  %3 = [[[0, 0, -1, -1]~, 1; [2, -1, -1, 0]~, -2; [1, 1, 0, 0]~, 2;
        [-1, 1, 1, 1]~, -1], Mat([[1, -1, 0, 0]~, 1])]
  ? [nffactorback(bnf, z) | z <- u]
  %4 = [[-1, 1, -1, 0]~, [1, -1, 0, 0]~]
  ? U = bnfunits(bnf, S); u = U[1];
  ? [nffactorback(bnf, z) | z <- u]
  %5 = [[6, -3, -2, -2]~, [-5, 5, 0, 0]~, [-1, 1, -1, 0]~, [1, -1, 0, 0]~]
  ? bnfisunit(bnf,[10,-40,24,11]~)
  %6 = []~
  ? bnfisunit(bnf, [10,-40,24,11]~, U)
  %7 = [2, 0, 1, 4]~
  ? nffactorback(bnf, %5, %7)
  %8 = [10, -40, 24, 11]~
 @eprog
