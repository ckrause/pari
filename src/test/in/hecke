default(parisize,"16M");
default(realprecision,38);
cxchareval(g,c,x) = exp(2*I*Pi*chareval(g,c,x));

gcharinit(bnfinit('y),1);

print("one large field");
bnf=bnfinit(polcyclo(17));
p1 = idealadd(bnf, 13, x^4-4*x^3-4*x+1);
p2 = idealadd(bnf, 17, x-1);
p3=idealadd(bnf ,19, x^8-6*x^7-4*x^6-3*x^5+8*x^4-3*x^3-4*x^2-6*x+1);
N=idealfactorback(bnf,[p1,p2,p3],[1,0,0]);
g=gcharinit(bnf,N);
round(g.cyc)

print("non trivial cm subfield"); /* does not work yet */
pol = rnfequation(polcyclo(5,'y),'x^2-'y-1);
bnf = bnfinit(pol,1);
g = gcharinit(bnf,1);
\\gcharalgebraic(g)
/* TODO: check values! */
\\c1 = [1,0,0,0,0,0,0];
\\vecan_gchar([g,c1],50);
\\c2 = [0,1,0,0,0,0,0];
\\vecan_gchar([g,c2],50);

gc = gcharinit(polcyclo(5),25);
gcharalgebraic(gc)
gcharalgebraic(gc,[[2,3],[0,0]])
gcharalgebraic(gc,[[-2,3],[1,0]])
gcharisalgebraic(gc,[0,0,1,0,0,0])
gcharisalgebraic(gc,[0,0,1,0,1,0,3/2],&pq)
pq
gc = gcharinit(x^2+1,1);
[chi]=gcharalgebraic(gc,[[4,0]])
gcharisalgebraic(gc,chi,&pq)
pq

print("need to increase prec");
pol = x^4 - 2*x^3 + 5*x^2 - 2*x - 1;
bnf = bnfinit(pol);
N = (2*3*7*11)^2;
G = gcharinit(bnf,N);

print("larger fields");
print("r2 = 5, clno = 5");
pol = x^12 + 8*x^10 + 6*x^8 - 268*x^6 - 1438*x^4 - 3420*x^2 - 3078;
bnf = bnfinit(pol);
g = gcharinit(bnf,1);
g = gcharinit(bnf,2*3*7);

print("r2 = 4, clno = 3");
pol = x^8 - 3*x^5 - x^4 + 8*x^2 - 10*x + 6;
bnf = bnfinit(pol);
g = gcharinit(bnf,1);
g = gcharinit(bnf,3^4*117*1009);

print("r2 = 8, clno = 16");
\\ WARNING.... LONG
pol = x^20 - 4*x^19 + 2*x^18 + 12*x^17 - 248*x^16 + 577*x^15 - 2210*x^14 + 4900*x^13 - 1187*x^12 + 7487*x^11 + 23396*x^10 - 53786*x^9 - 64916*x^8 - 97158*x^7 - 267387*x^6 + 221033*x^5 + 460138*x^4 + 9786*x^3 + 481572*x^2 + 115934*x - 511901;
bnf = bnfinit(pol);
{p5 = idealadd(bnf, 5,
96965017807771961905683702603422608463328455154870010/9523197523984467081398524314103182597785758649553142622913*x^19
-243702022593120105582606367863258391277124600413664280/9523197523984467081398524314103182597785758649553142622913*x^18
-173785223880858947981363371041479604207829500044070035/3174399174661489027132841438034394199261919549851047540971*x^17
+2246708897157516926966583891688362785713249927792681345/9523197523984467081398524314103182597785758649553142622913*x^16
-7760358825179556246215703931103085586929873875979038665/3174399174661489027132841438034394199261919549851047540971*x^15
+5991271817067359399837986097786709619023316405452671045/3174399174661489027132841438034394199261919549851047540971*x^14
-7293791089064536257647343890928334214525350150840247620/732553655691112852415271101084860199829673742273318663301*x^13
+9007652007415671496609726357891030960671674064881086160/3174399174661489027132841438034394199261919549851047540971*x^12
+963431180384079513015132976216364636048834461748683606840/9523197523984467081398524314103182597785758649553142622913*x^11
-541153718261886447488302057317224751222484902406081244665/9523197523984467081398524314103182597785758649553142622913*x^10
+495993549060025841136781668831845626147271198224290730420/1058133058220496342377613812678131399753973183283682513657*x^9
-2951512431380945050194084758301837078633183983299494641110/9523197523984467081398524314103182597785758649553142622913*x^8
-4229836816264991752928370151739394467094932865979692757325/3174399174661489027132841438034394199261919549851047540971*x^7
-3551897129770853600638689559295650739899333509563576842360/3174399174661489027132841438034394199261919549851047540971*x^6
-11081640567925230059874148533475145986631681618481200814914/3174399174661489027132841438034394199261919549851047540971*x^5
-29821379555152458168834404288142990415610216045122401039040/9523197523984467081398524314103182597785758649553142622913*x^4
+60674413212920467734881418550608279784972041558727891609720/9523197523984467081398524314103182597785758649553142622913*x^3
-6685591543847809652898148650746047356406283505802044502066/9523197523984467081398524314103182597785758649553142622913*x^2
+975035794097135137816802771013149686408385892613702411829/732553655691112852415271101084860199829673742273318663301*x
+534871993442126298320141788238586645765887992741948876367/56350281207008680955020853929604630756128749405639897177)};
p5 = idealfactor(bnf,p5)[1,1];
p101 = idealadd(bnf, 101, x^2-18*x-28);
p101 = idealfactor(bnf, p101)[1,1];
g = gcharinit(bnf,[p5,[0,0,0,0]]);
default(parisize,"16m");
g = gcharinit(bnf,[[p5,1;p101,3],[0,1,0,1]]);

print("gcharidentify");
bnf = bnfinit(x^4 - x^3 + 3*x^2 + 2*x + 1, 1);
G = gcharinit(bnf, 1);
round(G.cyc)
gcharidentify(G,[],[])
pr = idealadd(bnf, 101, x-48);
idl = idealadd(bnf, 140788137003612377, 6496*x^3-6496*x^2+19489*x-35497622602420127);
B=2;
{forvec(chi=[[0,1],[-B,B],[-B,B],[-B,B]],
  param = gcharparameters(G,chi);
  if(gcharidentify(G,[pr],[chareval(G,chi,pr)])!=chi,print("FAIL a: chi=",chi));
  if(gcharidentify(G,[pr,1,2],[chareval(G,chi,pr),
    [param[4],param[2]],[param[5],param[3]]])!=chi,print("FAIL b: chi=",chi));
  if(gcharidentify(G,[idl,1,2],[chareval(G,chi,idl),
    [param[4],param[2]],[param[5],param[3]]])!=chi,print("FAIL c: chi=",chi));
)};
gcharidentify(G,[1,2],[[0,1],[0,0]])
gcharidentify(G,[1,2],[[0,1/2],[0,0]])
gcharidentify(G,[1,2],[[0,0.7],[0,0]])
gcharidentify(G,[1],[[0,0]])
\\ TODO init interface

/* bigger units, cm, etc. */
gc = gcharinit(x^2 + 4625968752,1);
gcharalgebraic(gc)
pol = x^6 + 2854*x^4 + 2036329*x^2 + 513996528;
gc = gcharinit(pol,7*13);
round(gc.cyc)
gcharalgebraic(gc)

/* big class number, precision */
print("prec increase");
f = x^3 - 5929*x^2 - 5932*x - 1;
g = gcharinit(f,1);
round(g.cyc)
/* increase prec */
localbitprec(64);bitprecision(gcharnewprec(g)[1])>=64
localbitprec(764);bitprecision(gcharnewprec(g)[1])>=764
/* evaluate */
p=idealprimedec(g.nf,13)[1];
localbitprec(64); v1 = chareval(g,[137,7,1,0,-1283,1233],p);
localbitprec(2048); v2 = chareval(g,[137,7,1,0,-1283,1233],p);
exponent(v1-v2) < -100
p=idealprimedec(g.nf,nextprime(1<<32))[1];
\\gcharideallog(g,p);
localbitprec(132); v1 = chareval(g,[137,7,1,0,-1283,1233],p);
localbitprec(2048); v2 = chareval(g,[137,7,1,0,-1283,1233],p);
exponent(v1-v2) < -132

print("limit cases");
bnf = bnfinit(x^2-5,1);
gc = gcharinit(bnf,1);
gcharalgebraic(gc)
bnf = bnfinit(x^2+1,1);
gc = gcharinit(bnf,1);
gcharalgebraic(gc)
print("wrong, this should be []:");
gcharalgebraic(gc,[[2,0]])
gc = gcharinit(x^4+x^2+x+1,1);
gcharalgebraic(gc)
gcharalgebraic(gc,[[1,0],[1,0]])
print("wrong, this should be [0,0,0,0]:");
gcharalgebraic(gc,[[0,0],[0,0]])
print("wrong, this should be [0,0,0,1]:");
gcharalgebraic(gc,[[1,1],[1,1]])
bnf = bnfinit(x^2-15,1);
gc = gcharinit(bnf,1);
print("wrong, this should be [[0,0,0]]:");
gcharalgebraic(gc,[[0,0],[0,0]])
print("wrong, this should be [[0,0,1]]:");
gcharalgebraic(gc,[[1,0],[0,1]])
bnf = bnfinit(x^3-x-1,1);
gc = gcharinit(bnf,1);
print("wrong, this should be [[0,0,1]]:");
gcharalgebraic(gc,[[1,0],[1,1]])
print("wrong, this should be []:");
gcharalgebraic(gc,[[1,0],[1,0]])

print("gcharisalgebraic");
bnf = bnfinit(polcompositum(x^2+1,x^2-2,2),1);
gc = gcharinit(bnf,1);
gcharisalgebraic(gc,[0,0,1])
gcharisalgebraic(gc,[0,1,0,1])
gcharisalgebraic(gc,[0,1,0,1/2])
gcharisalgebraic(gc,[0,1,0,1/3])


print("gcharparameters");
bnf = bnfinit(polcompositum(x^2+1,x^2-2,2),1);
gc = gcharinit(bnf,1);
round(2^20*gcharparameters(gc,[1,1,0;-1,0,1]))

print("chareval");
bnf = bnfinit(x^2-5,1);
gc = gcharinit(bnf,1);
{pr =
idealprimedec(bnf,4868320566074468416097809002841831981658439271775190047920287334713696332088188270302203142585474506572031649428572390977423717630750557541900820118557642144443115103994166347876446053933456365372443159385038281515406885479747287229391251928691579336473986380517198489368653247235220470411135182771495870761970425831248490802339741145177367606504253702366044757540837091578313318381751990985274838858471553879603486279186618215547339963941317895448200405735601843412836041079417187853293418139422395939702479069851901004480187793116104550625410950517848593134330788344046026982177143293369431992447318613826461691545456669249262035189314826400325163760162186599556491881653572410925778376382784596006650973201534577780715605881753754637909365503082172360234118525438866377677143768516149987111093650011641611864293773011677933805015609245095155892783139734857107226208996763683785018645448619606720812034222383494488841874984727092271722163949359822795927735020861595850675165350830336905890838102021)[1]};
v1 = chareval(gc,[16876547436542378657653465325489780897097678654765346543],pr);
default(realbitprecision,1024)
gc = gcharnewprec(gc);
v2 = chareval(gc,[16876547436542378657653465325489780897097678654765346543],pr);
exponent(v1-v2) < -120
default(realbitprecision,128)

print("gcharidentify 2");
bnf = bnfinit(x^2-2,1);
gc = gcharinit(bnf,1); round(gc.cyc)
pr = idealprimedec(bnf,7)[1];
th = chareval(gc,[5],pr);
gcharidentify(gc,[pr],[th])
chiw = gcharidentify(gc,[pr],[th+I*5/7]);
exponent(chareval(gc,chiw,pr)-th-I*5/7) < -100



print("from doc");
bnf = bnfinit(x^2-5,1);
gc = gcharinit(bnf,1);
chi = gcharidentify(gc,[2],[[0,13.]]);
gcharparameters(gc,chi)[2]
pr = idealprimedec(bnf,11)[1];
chi = gcharidentify(gc,[pr],[0.3]);
chareval(gc,chi,pr)
bnf = bnfinit(x^2-5,1);
gc = gcharinit(bnf,1);
pr = idealprimedec(bnf,11)[1];
chi = gcharidentify(gc,[pr],[0.184760]);
abs(chi[1]) > 1000
localprec(10); chi = gcharidentify(gc,[pr],[0.184760])
bnf = bnfinit(x^2-2,1);
gc = gcharinit(bnf,1); round(gc.cyc)
gcharidentify(gc,[1,2],[[0,3.5+1/3*I],[0,-3.5+1/3*I]])


print("bad inputs");
gcharinit([],1)
gcharinit(bnfinit(x),[])
gcharinit(bnfinit(x),[1,[]])
gcharidentify([],[1],[[0,0]]);
gcharidentify('G,[1],[[0,0]]);
bnf = bnfinit(x^4 - x^3 + 3*x^2 + 2*x + 1, 1);
G = gcharinit(bnf, 1);
pr = idealadd(bnf, 101, x-48);
gcharidentify(G,[1,1],[[0,0],[0,0]]);
gcharidentify(G,[1,0],[[0,0],[0,0]]);
gcharidentify(G,[1,3],[[0,0],[0,0]]);
gcharidentify(G,[1,[]],[[0,0],[0,0]]);
gcharidentify(G,[1,'x],[[0,0],[0,0]]);
gcharidentify(G,[[]],[1.]);
gcharidentify(G,[pr],[1+O(3^7)]);
gcharidentify(G,[pr],['x]);
gcharidentify(G,[1],['x]);
gcharidentify(G,[1],[[]]);
gcharidentify(G,[1],[[0.1,0]]);
gcharidentify(G,[1],[[0,O(3^7)]]);
gcharidentify(G,[1],[0,0]);
G = gcharinit(bnf, pr);
gcharidentify(G,[pr],[0]);
tmp = G[3];
G[3] = 0;
gcharnewprec(G);
G[3] = tmp;
tmp = G[1];
G[1] = 0;
gcharnewprec(G);
G[1] = tmp;
tmp = G[7];
G[7] = 0;
gcharnewprec(G);
G[7] = tmp;
tmp = G[7][1][2];
G[7][1][2] = 2^20;
gcharidentify(G,[],[]);
G[7][1][2] = tmp;
gc = gcharinit(x^2+1,1);
gcharalgebraic(gc,0);
gcharalgebraic(gc,[1..10]);
gcharalgebraic(gc,[0]);
gcharalgebraic(gc,[[]]);
gcharalgebraic(gc,[[0,[]]]);
gcharalgebraic(gc,[[[],0]]);
chareval(gc,O(3^7),1);
chareval(gc,[0,O(3^7)],1);
\\ regression tests
gc = gcharinit(bnfinit(x^2-x-276,1), [2,[0,1]]);

gc = gcharinit(x^2-2,1);
print("wrong, this should be an invalid input:");
gcharalgebraic(gc,[])
gc = gcharinit(x^3-x-1,1);
print("wrong, this should be an invalid input:");
gcharalgebraic(gc,[[1,1]])
\\don't put tests after the errors
